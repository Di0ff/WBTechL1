Вопрос 3
Чем отличаются RWMutex от Mutex?

Отрывок с сайта https://metanit.com/go/tutorial/
Для упрощения синхронизации между горутинами в Go имеется пакет sync,
который предоставляет ряд возможностей, в частности мьютексы.
Мьютексы позволяют разграничить доступ к некоторым общим ресурсам,
гарантируя, что только одна горутина имеет к ним доступ в определенный момент времени.
И пока одна горутина не освободит общий ресурс, другая горутина не может с ним работать.

На уровне кода мьютекс представляет тип sync.Mutex.
Для блокирования доступа к общему разделяемому ресурсу у мьютекса вызывается метод Lock(),
а для разблокировки доступа — метод Unlock().

Как я понимаю, Mutex`ы используются для предотвращения data race.
К примеру, у нас есть телеграм-бот для отслеживания трафика, и чтобы избежать ситуации,
когда счетчик трафика записывает одного и того же пользователя дважды или более раз, используется Mutex.
Он блокирует доступ горутин к переменной и разблокирует по окончанию выполнения какого-либо действия.

RWMutex — это расширение обычного Mutex`а.
Различие их в том, что RWMutex позволяет нескольким горутинам одновременно читать данные,
но запись данных может выполняться только одной горутиной,
причём в этот момент все остальные операции чтения и записи блокируются.
RWMutex особенно полезно в тех случаях,
когда требуется частое чтение и редкое изменение данных.
Это значительно повышает производительность, так как одновременное чтение не блокирует другие операции чтения,
в отличие от обычного Mutex`а, который блокирует доступ ко всем операциям, даже если они не изменяют данные.
Важно учитывать, что использование RWMutex`а требует тщательного управления блокировками,
чтобы избежать взаимных блокировок (deadlock) и обеспечить корректность работы программы.